- 강의 정리 -
기록을 많이 하라! - 포트폴리오
Generic Programming - 자료형에 무관한 프로그래밍, 어떤 자료형으로든 프로그래밍이 가능함
std::vector<자료형> 같이 어떤 자료형을 넣어서든 프로그래밍을 할 수 있다

std::vector<int> v;
std::sort<std::vector<int>::iterator>(v.begin(), v.end());

와 같이 쓸 수 있지만 진짜는 std::vector<Animal> 같은 것

파일 입출력은 '무조건' 공부해야하는 부분 - 우리가 사용할 자료는 무조건 데이터형식의 파일이 되어있을 것임
binary or text로 다 되어있어

데이터를 못 읽으면 코딩하는게 '무의미'
공부는 알아서 하는 것
최신기능을 사용하는 것을 연습해보자.
Debug 모드로 코딩하지마!
Debug로 오류 검사 열심히 해봐야 문제가 많아.
Debug는 프로파일링 할 때 사용. - 코드에서 CPU가 어디에서 사용이 많이 되는지 확인하는 능력
Debugger 코드는 매우매우 무겁다.

pointer는 뭐야?
pointer는 왜 쓰니?
pointer 메모리를 pointing 하는 것이다!
메모리는 지역, 전역, FreeStore에 위치할 수 있어.
pointer가 있는 곳이랑 메모리가 있는 곳은 다른 곳
그렇지만 pointer로 메모리가 있는 곳을 원격으로 조작하고싶어.

reference도 똑같은 거야~

근데 원격조작을 하는데 메모리가 사라졌을 때 포인터가 걔가 사라졌는지 몰라.
=> 그래서 이것을 방지하려고 쓰는게 smart pointer야

RAII라는 개념으로 클래스가 돌아가는데 객체가 소멸되었을 때 소멸자가 호출 되는거야
JAVA는 프로그래머를 못 믿어서 혼자서 돌아가는 언어, 안에서는 포인터로 돌아다니면서 Garbage Collector의 역할을 해

호출 가능하다?
함수 호출 연산자를 오버로딩하면서 사용할 수 있지.

관찰클래스 STRING을 만들어보았어.
클래스는 자원을 할당하는 것에서 시작해 깊은 복사, 이동은 무.조.건 코딩을 해야하는거야

컨테이너가 되려면 어떤 조건을 충족해야하나?
begin(), end()를 제공할 수 있어야해.
컨테이너에게 담고있는 자료형을 물어볼 수 있어야해.
컨테이너용 반복자를 만들었어.
직접 만들어보면서 어떻게 돌아가는지 무엇이 필요하는지 살펴봤어.

컨테이너의 종류를 구분해보까?
Sequential, Associative, Unordered Associative

왜, 그러한 컨테이너를 사용해봤어?
뭐에 중점을 두어서 그러한 컨테이너를 써봤어?

반복자가 뭔지 알아?
원소가 많이 들어가 있는데 자료형에 무관하게 모든 원소들을 돌아다닐 수 있는 특별한 클래스

반복자는 소프트웨어 공학자들이 만든 반복자 패턴이란 걸 공부해봐. 디자인 패턴.
반복자 종류에는 뭐가 있어?(6가지 있지)
반복자 특질.(iterator traits) - 어떤 데이터가 템플릿에 전달될지 모르기 때문에 어떤 자료가 템플릿에 전달되었는지 알 수 있는 것

반복자 어댑터? reverse_iterator 같은 것을 내 마음대로 만들 수 있어.

알고리즘 함수는 어떻게 동작하니?
반복자로 인자로 받아서 함수가 돌아가게 된단다.
OCP라는 디자인 principle
클래스는 최대한 작게 만들지만 확장성을 가지고 있도록 만든다.
앞으로 어떤 알고리즘이 등장하더라도, 어떤 자료형이 들어가더라도 돌아갈 수 있다.

알고리즘의 기능 3가지

원소를 수정하지 않는 알고리즘!
원소를 수정하는 알고리즘!
원소의 순서를 재배치하는 알고리즘!

직접 for loop를 도는 것보다 알고리즘을 돌리는게 낫다.
오류가 더 적게 나옴.
병렬처리가 가능하게 만들어 속도를 높일 수 있다.
C++로 재작성된 constrained 알고리즘 함수를 사용하면 적절한 오류 메세지를 잘 보여준다.
최대한 전부 재작성된 알고리즘 함수를 사용할 수 있도록 공부를 해보자!
변화를 두려워하면 안된다.

프로그래밍에서 당부해봐

자신을 천재라고 착각하지마. 눈으로 훑어본다고 너가 아는게 아니야.
문제해결 과정을 이해해야해. 자료를 읽어올 수 있어야 사용이 가능한거야.
외부파일 못 가져오면 어디다 쓰려고?
많이 실수할수록 더 좋은 코드을 작성할 수 있어.
실수 많이하고 실수를 두려워하지말자.
&와 const는 잘 이해하고 쓰자.

정보! - 어떤 책이 보기 좋냐




































