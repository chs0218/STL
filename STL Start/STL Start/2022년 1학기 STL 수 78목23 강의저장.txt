파일이름: 소스.cpp
파일크기: 1660
저장시간: 2022-03-02 17:09:31 GMT+9
파일이름: 소스.cpp
파일크기: 1729
저장시간: 2022-03-02 17:11:55 GMT+9
파일이름: 소스.cpp
파일크기: 1952
저장시간: 2022-03-02 17:15:16 GMT+9
//-----------------------------------------------------------------------------
// 2022. 1학기 STL 3월 2일 수요일(1주 1일)
// 
// - 강의소개, 출석점수없음
// - 교과서, cppreference.com
// - google coding convention을 참고
// - 프로젝트 환경설정 Release/x64
//		메뉴 - 프로젝트 - 설정 - C++언어: 최신언어초안
// - 공부란 무엇인가?
// 할 일 - 한학기 코딩한 내용을 저장할 수 있게 save 기능 완성
//-----------------------------------------------------------------------------
#include <iostream>
#include <string_view>
#include <filesystem>
#include <chrono>	// 시간 관련 함수
#include <fstream>
#include <vector>
#include <algorithm>

//using namespace std;
//void save(const string&);
void save(std::string_view);

int main()
{
	// string과 string_view 크기 확인
	
	std::cout << "string 크기:"<< sizeof(std::string) << std::endl;
	std::cout << "string_view 크기:"<< sizeof(std::string_view) << std::endl;
	save("소스.cpp");
}

void save(std::string_view fname)
{
	// 읽을 파일을 연다
	std::ifstream in{ fname.data() };


	// 쓸 파일도 연다
	std::ofstream out{ "2022년 1학기 STL 수 78목23 강의저장.txt", std::ios::app };


	// 저장할 파일이름과 크기(C++17)를 출력한다.
	out << "파일이름: " << fname << std::endl;
	out << "파일크기: " << std::filesystem::file_size(fname) << std::endl;
	

	// 현재 날짜와 시간(C++20)을 출력한다.
	auto time = floor<std::chrono::seconds>(std::chrono::system_clock::now());
	out << "저장시간: " << std::chrono::zoned_time("Asia/Seoul", time) << std::endl;
	

	// 읽은 파일을 강의저장 파일에 덧붙인다.
	// 1. 벡터에 파일을 읽어온다.
	// std::vector<char> v{ std::istream_iterator<char>{in}, {} };
	std::vector<char> v{ std::istreambuf_iterator<char>{in}, {} };		// 띄어쓰기도 포함해서 저장
	
	/*for (char c : v)
		out << c;*/

	// 2. copy 알고리즘으로 벡터에 있는 글자를 강의저장파일로 복사한다
	std::copy(v.begin(), v.end(), std::ostream_iterator<char>{out});

}

파일이름: 소스.cpp
파일크기: 2053


저장시간: 2022-03-02 17:16:11 GMT+9


//-----------------------------------------------------------------------------
// 2022. 1학기 STL 3월 2일 수요일(1주 1일)
// 
// - 강의소개, 출석점수없음
// - 교과서, cppreference.com
// - google coding convention을 참고
// - 프로젝트 환경설정 Release/x64
//		메뉴 - 프로젝트 - 설정 - C++언어: 최신언어초안
// - 공부란 무엇인가?
// 할 일 - 한학기 코딩한 내용을 저장할 수 있게 save 기능 완성
//-----------------------------------------------------------------------------
#include <iostream>
#include <string_view>
#include <filesystem>
#include <chrono>	// 시간 관련 함수
#include <fstream>
#include <vector>
#include <algorithm>

//using namespace std;
//void save(const string&);
void save(std::string_view);

int main()
{
	// string과 string_view 크기 확인
	
	std::cout << "string 크기:"<< sizeof(std::string) << std::endl;
	std::cout << "string_view 크기:"<< sizeof(std::string_view) << std::endl;
	save("소스.cpp");
}

void save(std::string_view fname)
{
	// 읽을 파일을 연다
	std::ifstream in{ fname.data() };


	// 쓸 파일도 연다
	std::ofstream out{ "2022년 1학기 STL 수 78목23 강의저장.txt", std::ios::app };


	// 저장할 파일이름과 크기(C++17)를 출력한다.
	out << std::endl << std::endl;
	out << "파일이름: " << fname << std::endl;
	out << "파일크기: " << std::filesystem::file_size(fname) << std::endl;
	

	// 현재 날짜와 시간(C++20)을 출력한다.
	out << std::endl << std::endl;
	auto time = floor<std::chrono::seconds>(std::chrono::system_clock::now());
	out << "저장시간: " << std::chrono::zoned_time("Asia/Seoul", time) << std::endl;
	

	// 읽은 파일을 강의저장 파일에 덧붙인다.
	// 1. 벡터에 파일을 읽어온다.
	out << std::endl << std::endl;

	// std::vector<char> v{ std::istream_iterator<char>{in}, {} };
	std::vector<char> v{ std::istreambuf_iterator<char>{in}, {} };		// 띄어쓰기도 포함해서 저장
	
	/*for (char c : v)
		out << c;*/

	// 2. copy 알고리즘으로 벡터에 있는 글자를 강의저장파일로 복사한다
	std::copy(v.begin(), v.end(), std::ostream_iterator<char>{out});

}

파일이름: 소스.cpp
파일크기: 2245


저장시간: 2022-03-03 10:38:15 GMT+9


//-----------------------------------------------------------------------------
// 2022. 1학기 STL 3월 2일 수요일(1주 1일)
// 
// - 강의소개, 출석점수없음
// - 교과서, cppreference.com
// - google coding convention을 참고
// - 프로젝트 환경설정 Release/x64
//		메뉴 - 프로젝트 - 설정 - C++언어: 최신언어초안
// - 공부란 무엇인가?
// 할 일 - 한학기 코딩한 내용을 저장할 수 있게 save 기능 완성
// 
// 읽은 파일의 정보를 읽어 쓸 파일에 덧붙여 쓴다
// Youtube - Back to Basics Classic STL 강의를 볼 수 있다면 도움이 될 것임
//-----------------------------------------------------------------------------
#include <iostream>
#include <string_view>
#include <filesystem>
#include <chrono>	// 시간 관련 함수
#include <fstream>
#include <vector>
#include <algorithm>

//using namespace std;
//void save(const string&);
void save(std::string_view);

int main()
{
	// string과 string_view 크기 확인
	
	std::cout << "string 크기:"<< sizeof(std::string) << std::endl;
	std::cout << "string_view 크기:"<< sizeof(std::string_view) << std::endl;
	save("소스.cpp");
}

void save(std::string_view fname)
{
	// 읽을 파일을 연다 - RALL
	std::ifstream in{ fname.data() };


	// 쓸 파일도 연다
	std::ofstream out{ "2022년 1학기 STL 수 78목23 강의저장.txt", std::ios::app };


	// 저장할 파일이름과 크기(C++17)를 출력한다.
	out << std::endl << std::endl;
	out << "파일이름: " << fname << std::endl;
	out << "파일크기: " << std::filesystem::file_size(fname) << std::endl;
	

	// 현재 날짜와 시간(C++20)을 출력한다.
	out << std::endl << std::endl;
	auto time = floor<std::chrono::seconds>(std::chrono::system_clock::now());
	out << "저장시간: " << std::chrono::zoned_time("Asia/Seoul", time) << std::endl;
	

	// 읽은 파일을 강의저장 파일에 덧붙인다.
	// 1. 벡터에 파일을 읽어온다.
	out << std::endl << std::endl;

	// std::vector<char> v{ std::istream_iterator<char>{in}, {} };

	// 1. 벡터에 파일을 읽어온다 - 컨테이너(자료구조)
	std::vector<char> v{ std::istreambuf_iterator<char>{in}, {} };		// 띄어쓰기도 포함해서 저장
	
	/*for (char c : v)
		out << c;*/

	// 2. copy 알고리즘으로 벡터에 있는 글자를 강의저장파일로 복사한다
	std::copy(v.begin(), v.end(), std::ostream_iterator<char>{out});

}

파일이름: 소스.cpp
파일크기: 692


저장시간: 2022-03-03 10:41:59 GMT+9


//-----------------------------------------------------------------------------
// 2022. 1학기 STL 3월 3일 목요일(1주 2일)
// 
// 할 일 - 어제 코딩한 save 함수를 save.cpp로 분리한 후 실행되도록 수정
// 
// Youtube - Back to Basics Classic STL 강의를 볼 수 있다면 도움이 될 것임
//-----------------------------------------------------------------------------
#include <iostream>


//using namespace std;
//void save(const string&);
void save(std::string_view);

int main()
{
	// string과 string_view 크기 확인
	
	std::cout << "string 크기:"<< sizeof(std::string) << std::endl;
	std::cout << "string_view 크기:"<< sizeof(std::string_view) << std::endl;
	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 650


저장시간: 2022-03-03 10:46:55 GMT+9


//-----------------------------------------------------------------------------
// 2022. 1학기 STL 3월 3일 목요일(1주 2일)
// 
// 할 일 - 어제 코딩한 save 함수를 save.cpp로 분리한 후 실행되도록 수정
// 
// Youtube - Back to Basics Classic STL 강의를 볼 수 있다면 도움이 될 것임
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"

//using namespace std;

int main()
{
	// string과 string_view 크기 확인
	
	std::cout << "string 크기:"<< sizeof(std::string) << std::endl;
	std::cout << "string_view 크기:"<< sizeof(std::string_view) << std::endl;
	save("소스.cpp");
}

파일이름: save.h
파일크기: 97


저장시간: 2022-03-03 11:03:24 GMT+9


#pragma once
#include <string_view>

//void save(const string&);
void save(std::string_view);

파일이름: save.cpp
파일크기: 1646


저장시간: 2022-03-03 11:03:24 GMT+9


//-----------------------------------------------------------------------------
// Save.cpp
// 
// 이 함수를 호출하면 "2022년 1학기 STL 수78목23 강의저장.txt"에
// 전달된 이름의 파일을 읽어 덧붙인다.
// 
// 2022.3.3	Programmed by HS
//-----------------------------------------------------------------------------

#include <filesystem>
#include <fstream>
#include <vector>
#include <chrono>	// 시간 관련 함수
#include <algorithm>
#include <cmath>	// floor
#include "save.h"

void save(std::string_view fname)
{
	// 읽을 파일을 연다 - RALL
	std::ifstream in{ fname.data() };


	// 쓸 파일도 연다
	std::ofstream out{ "2022년 1학기 STL 수 78목23 강의저장.txt", std::ios::app };


	// 저장할 파일이름과 크기(C++17)를 출력한다.
	out << std::endl << std::endl;
	out << "파일이름: " << fname << std::endl;
	out << "파일크기: " << std::filesystem::file_size(fname) << std::endl;


	// 현재 날짜와 시간(C++20)을 출력한다.
	out << std::endl << std::endl;
	auto time = floor<std::chrono::seconds>(std::chrono::system_clock::now());
	out << "저장시간: " << std::chrono::zoned_time("Asia/Seoul", time) << std::endl;


	// 읽은 파일을 강의저장 파일에 덧붙인다.
	// 1. 벡터에 파일을 읽어온다.
	out << std::endl << std::endl;

	// std::vector<char> v{ std::istream_iterator<char>{in}, {} };

	// 1. 벡터에 파일을 읽어온다 - 컨테이너(자료구조)
	std::vector<char> v{ std::istreambuf_iterator<char>{in}, {} };		// 띄어쓰기도 포함해서 저장

	/*for (char c : v)
		out << c;*/

	// 2. copy 알고리즘으로 벡터에 있는 글자를 강의저장파일로 복사한다
	std::copy(v.begin(), v.end(), std::ostream_iterator<char>{out});

}

파일이름: 소스.cpp
파일크기: 507


저장시간: 2022-03-03 11:03:24 GMT+9


//-----------------------------------------------------------------------------
// 2022. 1학기 STL 3월 3일 목요일(1주 2일)
// 
// 할 일 - 어제 코딩한 save 함수를 save.cpp로 분리한 후 실행되도록 수정
// 
// Youtube - Back to Basics Classic STL 강의를 볼 수 있다면 도움이 될 것임
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"

//using namespace std;

int main()
{
	save("save.h");
	save("save.cpp");
	save("소스.cpp");
}

파일이름: save.h
파일크기: 97
저장시간: 2022-03-03 11:05:46 GMT+9

#pragma once
#include <string_view>

//void save(const string&);
void save(std::string_view);

파일이름: save.cpp
파일크기: 1600
저장시간: 2022-03-03 11:05:46 GMT+9

//-----------------------------------------------------------------------------
// Save.cpp
// 
// 이 함수를 호출하면 "2022년 1학기 STL 수78목23 강의저장.txt"에
// 전달된 이름의 파일을 읽어 덧붙인다.
// 
// 2022.3.3	Programmed by HS
//-----------------------------------------------------------------------------

#include <filesystem>
#include <fstream>
#include <vector>
#include <chrono>	// 시간 관련 함수
#include <algorithm>
#include <cmath>	// floor
#include "save.h"

void save(std::string_view fname)
{
	// 읽을 파일을 연다 - RALL
	std::ifstream in{ fname.data() };


	// 쓸 파일도 연다
	std::ofstream out{ "2022년 1학기 STL 수 78목23 강의저장.txt", std::ios::app };


	// 저장할 파일이름과 크기(C++17)를 출력한다.
	out << std::endl << std::endl;
	out << "파일이름: " << fname << std::endl;
	out << "파일크기: " << std::filesystem::file_size(fname) << std::endl;


	// 현재 날짜와 시간(C++20)을 출력한다.
	auto time = floor<std::chrono::seconds>(std::chrono::system_clock::now());
	out << "저장시간: " << std::chrono::zoned_time("Asia/Seoul", time) << std::endl;


	// 읽은 파일을 강의저장 파일에 덧붙인다.
	// 1. 벡터에 파일을 읽어온다.
	out << std::endl;

	// std::vector<char> v{ std::istream_iterator<char>{in}, {} };

	// 1. 벡터에 파일을 읽어온다 - 컨테이너(자료구조)
	std::vector<char> v{ std::istreambuf_iterator<char>{in}, {} };		// 띄어쓰기도 포함해서 저장

	/*for (char c : v)
		out << c;*/

	// 2. copy 알고리즘으로 벡터에 있는 글자를 강의저장파일로 복사한다
	std::copy(v.begin(), v.end(), std::ostream_iterator<char>{out});

}

파일이름: 소스.cpp
파일크기: 507
저장시간: 2022-03-03 11:05:46 GMT+9

//-----------------------------------------------------------------------------
// 2022. 1학기 STL 3월 3일 목요일(1주 2일)
// 
// 할 일 - 어제 코딩한 save 함수를 save.cpp로 분리한 후 실행되도록 수정
// 
// Youtube - Back to Basics Classic STL 강의를 볼 수 있다면 도움이 될 것임
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"

//using namespace std;

int main()
{
	save("save.h");
	save("save.cpp");
	save("소스.cpp");
}

파일이름: 소스.cpp
파일크기: 756
저장시간: 2022-03-03 11:16:28 GMT+9

//-----------------------------------------------------------------------------
// 2022. 1학기 STL 3월 3일 목요일(1주 2일)
// 
// 할 일 - 어제 코딩한 save 함수를 save.cpp로 분리한 후 실행되도록 수정
// 
// Youtube - Back to Basics Classic STL 강의를 볼 수 있다면 도움이 될 것임
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"

//using namespace std;

// [문제] main()을 변경하면 안된다.
// 실행하면 a와 b의 값ㅇ이 서로 바뀌어야한다.

void change(int&, int&);

int main()
{
	int a{ 1 };
	int b{ 2 };

	change(a, b);

	std::cout << a << ", " << b << std::endl;
	save("소스.cpp");
}

void change(int& a, int& b)
{
	int tmp;
	tmp = a;
	a = b;
	b = tmp;

}

파일이름: 소스.cpp
파일크기: 778
저장시간: 2022-03-03 11:36:47 GMT+9

//-----------------------------------------------------------------------------
// 2022. 1학기 STL 3월 3일 목요일(1주 2일)
// 
// 할 일 - 어제 코딩한 save 함수를 save.cpp로 분리한 후 실행되도록 수정
// 
// Youtube - Back to Basics Classic STL 강의를 볼 수 있다면 도움이 될 것임
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"

//using namespace std;

// [문제] main()을 변경하면 안된다.
// 실행하면 a와 b의 값ㅇ이 서로 바뀌어야한다.

void change(int&, int&);

int main()
{
	int a{ 1 };
	int b{ 2 };

	change(a, b);

	std::cout << a << ", " << b << std::endl;
	save("소스.cpp");
}

void change(int& a, int& b)
{
	int tmp{};	// default 초기화

	tmp = a;
	a = b;
	b = tmp;

}

파일이름: 소스.cpp
파일크기: 1154
저장시간: 2022-03-03 11:47:05 GMT+9

//-----------------------------------------------------------------------------
// 2022. 1학기 STL 3월 3일 목요일(1주 2일)
// 
// 할 일 - 어제 코딩한 save 함수를 save.cpp로 분리한 후 실행되도록 수정
// 
// Youtube - Back to Basics Classic STL 강의를 볼 수 있다면 도움이 될 것임
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"

//using namespace std;

// [문제] main()을 변경하면 안된다.
// 실행하면 a와 b의 값이 서로 바뀌어야한다.

class Dog {
	int age;
public:
	Dog() {
		age = 0;
	}

	Dog(int i) :age(i) {

	}

	int getAge()
	{
		return age;
	}

	void changeAge(int i)
	{
		age = i;
	}
};

void change(Dog&, Dog&);
std::ostream& operator <<(std::ostream&, Dog&);

int main()
{
	Dog a{ 1 };
	Dog b{ 2 };

	change(a, b);

	std::cout << a << ", " << b << std::endl;
	save("소스.cpp");
}

void change(Dog& a, Dog& b)
{
	Dog tmp{};	// default 초기화

	tmp.changeAge(a.getAge());
	a.changeAge(b.getAge());
	b.changeAge(tmp.getAge());
}

std::ostream& operator <<(std::ostream& c, Dog& dog)
{
	c << dog.getAge();
	return c;
}

파일이름: 소스.cpp
파일크기: 1169
저장시간: 2022-03-03 12:13:23 GMT+9

//-----------------------------------------------------------------------------
// 2022. 1학기 STL 3월 3일 목요일(1주 2일)
// 
// 할 일 - 어제 코딩한 save 함수를 save.cpp로 분리한 후 실행되도록 수정
// 
// Youtube - Back to Basics Classic STL 강의를 볼 수 있다면 도움이 될 것임
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"

//using namespace std;

// [문제] main()을 변경하면 안된다.
// 실행하면 a와 b의 값이 서로 바뀌어야한다.

class Dog {
	int age;
public:
	Dog() = default;

	Dog(int i) :age{ i } {};

	int getAge() const
	{
		return age;
	}

	void changeAge(const int i)
	{
		age = i;
	}
};

void change(Dog&, Dog&);
std::ostream& operator <<(std::ostream&, const Dog&);

int main()
{
	Dog a{ 1 };
	Dog b{ 2 };

	change(a, b);

	std::cout << a << ", " << b << std::endl;
	save("소스.cpp");
}

void change(Dog& a, Dog& b)
{
	Dog tmp{};	// default 초기화

	tmp.changeAge(a.getAge());
	a.changeAge(b.getAge());
	b.changeAge(tmp.getAge());
}

std::ostream& operator <<(std::ostream& c, const Dog& dog)
{
	c << dog.getAge();
	return c;
}